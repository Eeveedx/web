function _0x2738() { const _0x1cc8dc = ['Clock', 'ACESFilmicToneMapping', 'js/draco/gltf/', 'error', 'render', 'radius', 'DirectionalLight', 'CubeReflectionMapping', 'PerspectiveCamera', 'setDRACOLoader', 'height', 'sRGBEncoding', 'width', 'resize', '11611040WngnfL', 'PointLight', 'appendChild', '\x0a\x09\x09\x09\x09//\x20varying\x20vec2\x20vUv;\x0a\x09\x09\x09\x09varying\x20vec3\x20modelPosition;\x0a\x0a\x09\x09\x09\x09void\x20main(){\x0a\x09\x09\x09\x09\x09\x09//先取出模型坐标的xy从(-1,1)纠正到(0.5-1),防止部分点过暗\x0a\x09\x09\x09\x09\x09\x09vec2\x20rg=((modelPosition.xy+1.0)*0.25+0.5).xy;\x0a\x09\x09\x09\x09\x09\x09//总体偏红色将R固定为1\x0a\x09\x09\x09\x09\x09\x09//取y值做绿色通道\x0a\x09\x09\x09\x09\x09\x09gl_FragColor\x20=\x20vec4(1.0,rg.y,(rg.x+rg.y)*0.4,1.0);\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09', 'castShadow', 'navigator', 'envMapIntensity', 'enablePan', '3pTImVd', 'innerHeight', '3212080fhLOsZ', '41682nFTLLI', 'Mesh', 'format', '1875402heFlov', 'setPixelRatio', '2754548cjhixz', 'container', 'mapSize', 'scale', 'domElement', 'test', 'innerWidth', 'getElementById', 'update', 'add', 'ShaderMaterial', 'far', 'outputEncoding', '326106nJJrah', 'setSize', 'createImageBitmap', 'textures/skybox0/', 'Scene', 'minDistance', 'shadow', 'AmbientLight', 'setDecoderPath', '18TXHeYW', 'shadowMap', 'devicePixelRatio', '5800775caUmbW', 'material', 'reflectivity', 'maxTouchPoints', 'CubeTextureLoader', 'maxDistance', 'load', 'platform', 'camera', 'models/heart3-processed.glb', 'envMap', 'SphereGeometry', 'scene', 'position', 'addEventListener', 'aspect', 'set', 'traverse', 'Object3D', 'enabled', '511GNGCXY', 'RGBFormat']; _0x2738 = function () { return _0x1cc8dc; }; return _0x2738(); } const _0x58feba = _0x8d75; (function (_0x1cb8ed, _0x243220) { const _0x308f9c = _0x8d75, _0x3ed907 = _0x1cb8ed(); while (!![]) { try { const _0x5b96f5 = -parseInt(_0x308f9c(0x186)) / 0x1 + -parseInt(_0x308f9c(0x1c4)) / 0x2 + parseInt(_0x308f9c(0x1be)) / 0x3 * (-parseInt(_0x308f9c(0x179)) / 0x4) + parseInt(_0x308f9c(0x192)) / 0x5 + parseInt(_0x308f9c(0x1c1)) / 0x6 * (-parseInt(_0x308f9c(0x1a6)) / 0x7) + parseInt(_0x308f9c(0x1b6)) / 0x8 + -parseInt(_0x308f9c(0x18f)) / 0x9 * (-parseInt(_0x308f9c(0x1c0)) / 0xa); if (_0x5b96f5 === _0x243220) break; else _0x3ed907['push'](_0x3ed907['shift']()); } catch (_0x2dec2e) { _0x3ed907['push'](_0x3ed907['shift']()); } } }(_0x2738, 0xc1f08)); import *as _0xd96b17 from './build/three.module.js'; import { OrbitControls } from './js/OrbitControls.js'; import { GLTFLoader } from './js/GLTFLoader.js'; import { DRACOLoader } from './js/DRACOLoader.js'; function _0x8d75(_0x29f374, _0x17facc) { const _0x2738a1 = _0x2738(); return _0x8d75 = function (_0x8d758f, _0x4a6090) { _0x8d758f = _0x8d758f - 0x178; let _0x12ee24 = _0x2738a1[_0x8d758f]; return _0x12ee24; }, _0x8d75(_0x29f374, _0x17facc); } let camera, scene, renderer; const clock = new _0xd96b17[(_0x58feba(0x1a8))](); let controls, material, ambientlight, dirLight, textureCube, model, path, group; fixiosTextureBlack(); function fixiosTextureBlack() { const _0x4c4501 = _0x58feba, _0x1e7e6a = /^(iPad|iPhone|iPod)/[_0x4c4501(0x17e)](window['navigator'][_0x4c4501(0x199)]) || /^Mac/[_0x4c4501(0x17e)](window[_0x4c4501(0x1bb)][_0x4c4501(0x199)]) && window[_0x4c4501(0x1bb)][_0x4c4501(0x195)] > 0x1; _0x1e7e6a && (window[_0x4c4501(0x188)] = undefined); } function init() { const _0x2f3139 = _0x58feba, _0xdb0a8a = document[_0x2f3139(0x180)](_0x2f3139(0x17a)); renderer = new _0xd96b17['WebGLRenderer']({ 'antialias': !![] }), renderer[_0x2f3139(0x178)](window[_0x2f3139(0x191)]), renderer[_0x2f3139(0x187)](window[_0x2f3139(0x17f)], window['innerHeight']), renderer['setAnimationLoop'](render), renderer[_0x2f3139(0x185)] = _0xd96b17[_0x2f3139(0x1b3)], renderer['toneMapping'] = _0xd96b17[_0x2f3139(0x1a9)], renderer[_0x2f3139(0x190)][_0x2f3139(0x1a5)] = ![], _0xdb0a8a[_0x2f3139(0x1b8)](renderer[_0x2f3139(0x17d)]), window[_0x2f3139(0x1a0)](_0x2f3139(0x1b5), onWindowResize), camera = new _0xd96b17[(_0x2f3139(0x1b0))](0x28, window[_0x2f3139(0x17f)] / window[_0x2f3139(0x1bf)], 0.1, 0x64), camera['position'][_0x2f3139(0x1a2)](0x0, 0x4, 0xa), controls = new OrbitControls(camera, _0xdb0a8a), controls['target'][_0x2f3139(0x1a2)](0x0, 0x2, 0x0), controls[_0x2f3139(0x181)](), controls[_0x2f3139(0x1bd)] = !![], controls[_0x2f3139(0x18b)] = 0x4, controls[_0x2f3139(0x197)] = 0x14, scene = new _0xd96b17[(_0x2f3139(0x18a))](), path = _0x2f3139(0x189); const _0x44e0bd = '.jpg', _0x2cbd77 = [path + 'px' + _0x44e0bd, path + 'nx' + _0x44e0bd, path + 'py' + _0x44e0bd, path + 'ny' + _0x44e0bd, path + 'pz' + _0x44e0bd, path + 'nz' + _0x44e0bd]; textureCube = new _0xd96b17[(_0x2f3139(0x196))]()[_0x2f3139(0x198)](_0x2cbd77), textureCube[_0x2f3139(0x1c3)] = _0xd96b17[_0x2f3139(0x1a7)], textureCube['mapping'] = _0xd96b17[_0x2f3139(0x1af)], scene['background'] = 0xffffff, ambientlight = new _0xd96b17[(_0x2f3139(0x18d))](0x404040), scene['add'](ambientlight), group = new _0xd96b17[(_0x2f3139(0x1a4))](), scene[_0x2f3139(0x182)](group); const _0x4e0fab = new _0xd96b17[(_0x2f3139(0x1b7))](0xddffdd, 0.8); _0x4e0fab[_0x2f3139(0x19f)]['z'] = 0x46, _0x4e0fab[_0x2f3139(0x19f)]['y'] = -0x46, _0x4e0fab[_0x2f3139(0x19f)]['x'] = -0x46, group[_0x2f3139(0x182)](_0x4e0fab); const _0x21ecfa = new _0xd96b17[(_0x2f3139(0x1b7))](0xffdddd, 0.8); _0x21ecfa[_0x2f3139(0x19f)]['z'] = 0x46, _0x21ecfa[_0x2f3139(0x19f)]['x'] = -0x46, _0x21ecfa[_0x2f3139(0x19f)]['y'] = 0x46, group[_0x2f3139(0x182)](_0x21ecfa); const _0xd1629e = new _0xd96b17[(_0x2f3139(0x1b7))](0xddddff, 0.8); _0xd1629e[_0x2f3139(0x19f)]['z'] = 0x46, _0xd1629e[_0x2f3139(0x19f)]['x'] = 0x46, _0xd1629e[_0x2f3139(0x19f)]['y'] = -0x46, group['add'](_0xd1629e); const _0x916526 = new _0xd96b17['AmbientLight'](0xffffff, 0.05); group[_0x2f3139(0x182)](_0x916526), dirLight = new _0xd96b17[(_0x2f3139(0x1ae))](0xffffff, 0x1), dirLight[_0x2f3139(0x19f)][_0x2f3139(0x1a2)](0x5, 0x5, 0x5), dirLight[_0x2f3139(0x1ba)] = !![], dirLight['shadow'][_0x2f3139(0x17b)][_0x2f3139(0x1b4)] = 0x800, dirLight[_0x2f3139(0x18c)][_0x2f3139(0x17b)][_0x2f3139(0x1b2)] = 0x800, dirLight[_0x2f3139(0x18c)][_0x2f3139(0x19a)]['near'] = 0x4, dirLight[_0x2f3139(0x18c)]['camera'][_0x2f3139(0x184)] = 0x10, dirLight['shadow'][_0x2f3139(0x1ad)] = 0.1, scene[_0x2f3139(0x182)](dirLight); var _0x265ed9 = '\x0a\x09\x09\x09\x09//\x20varying\x20vec2\x20vUv;\x0a\x09\x09\x09\x09varying\x20vec3\x20modelPosition;\x0a\x0a\x09\x09\x09\x09void\x20main(){\x0a\x09\x09\x09\x09\x09//\x20vUv\x20=\x20uv;\x0a\x09\x09\x09\x09\x09gl_Position\x20=\x20projectionMatrix\x20*\x20modelViewMatrix\x20*\x20vec4(position,\x201.0);\x0a\x09\x09\x09\x09\x09modelPosition=(\x20vec4(position,\x201.0)).xyz;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09', _0x392508 = _0x2f3139(0x1b9), _0x211270 = { 'iTime': { 'value': 0x0 } }, _0x3af1da = new _0xd96b17[(_0x2f3139(0x183))]({ 'vertexShader': _0x265ed9, 'fragmentShader': _0x392508, 'uniforms': _0x211270, 'side': 0x2 }); const _0x4dd73d = new _0xd96b17[(_0x2f3139(0x19d))](0x1, 0x64, 0x64), _0x354fc4 = new _0xd96b17[(_0x2f3139(0x1c2))](_0x4dd73d, _0x3af1da); _0x354fc4[_0x2f3139(0x17c)][_0x2f3139(0x1a2)](0x32, 0x32, 0x32), scene[_0x2f3139(0x182)](_0x354fc4); const _0x518e = new DRACOLoader(); _0x518e[_0x2f3139(0x18e)](_0x2f3139(0x1aa)); const _0x38d540 = new GLTFLoader(); _0x38d540[_0x2f3139(0x1b1)](_0x518e), _0x38d540['load'](_0x2f3139(0x19b), function (_0x5a9b2f) { const _0xbc1e9a = _0x2f3139; model = _0x5a9b2f[_0xbc1e9a(0x19e)], model[_0xbc1e9a(0x1a3)](function (_0x1ee231) { const _0x29c918 = _0xbc1e9a; _0x1ee231['isMesh'] && (material = _0x1ee231[_0x29c918(0x193)], material[_0x29c918(0x19c)] = textureCube, material[_0x29c918(0x1bc)] = 0x1, material[_0x29c918(0x194)] = 0.4, _0x1ee231[_0x29c918(0x193)] = material, _0x1ee231[_0x29c918(0x1ba)] = !![], _0x1ee231['receiveShadow'] = !![]); }), model[_0xbc1e9a(0x17c)]['set'](0.18, 0.18, 0.18), model[_0xbc1e9a(0x19f)][_0xbc1e9a(0x1a2)](0x0, 0x0, 0x0), scene[_0xbc1e9a(0x182)](model); }, undefined, function (_0xc26e81) { const _0x2a4de1 = _0x2f3139; console[_0x2a4de1(0x1ab)](_0xc26e81); }); } function onWindowResize() { const _0x254910 = _0x58feba; camera[_0x254910(0x1a1)] = window[_0x254910(0x17f)] / window[_0x254910(0x1bf)], camera['updateProjectionMatrix'](), renderer[_0x254910(0x187)](window[_0x254910(0x17f)], window[_0x254910(0x1bf)]); } function render() { const _0x5ebfc5 = _0x58feba; renderer[_0x5ebfc5(0x1ac)](scene, camera); } init();